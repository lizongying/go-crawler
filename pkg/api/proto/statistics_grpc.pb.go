// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: pkg/api/proto/statistics.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatisticsClient is the client API for Statistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsClient interface {
	CrawlerChanged(ctx context.Context, in *Crawler, opts ...grpc.CallOption) (*Response, error)
	SpiderChanged(ctx context.Context, in *Spider, opts ...grpc.CallOption) (*Response, error)
	JobChanged(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error)
	TaskChanged(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Response, error)
	RequestChanged(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ItemChanged(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error)
}

type statisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsClient(cc grpc.ClientConnInterface) StatisticsClient {
	return &statisticsClient{cc}
}

func (c *statisticsClient) CrawlerChanged(ctx context.Context, in *Crawler, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Statistics/CrawlerChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) SpiderChanged(ctx context.Context, in *Spider, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Statistics/SpiderChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) JobChanged(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Statistics/JobChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) TaskChanged(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Statistics/TaskChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) RequestChanged(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Statistics/RequestChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) ItemChanged(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.Statistics/ItemChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServer is the server API for Statistics service.
// All implementations must embed UnimplementedStatisticsServer
// for forward compatibility
type StatisticsServer interface {
	CrawlerChanged(context.Context, *Crawler) (*Response, error)
	SpiderChanged(context.Context, *Spider) (*Response, error)
	JobChanged(context.Context, *Job) (*Response, error)
	TaskChanged(context.Context, *Task) (*Response, error)
	RequestChanged(context.Context, *Request) (*Response, error)
	ItemChanged(context.Context, *Item) (*Response, error)
	mustEmbedUnimplementedStatisticsServer()
}

// UnimplementedStatisticsServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsServer struct {
}

func (UnimplementedStatisticsServer) CrawlerChanged(context.Context, *Crawler) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrawlerChanged not implemented")
}
func (UnimplementedStatisticsServer) SpiderChanged(context.Context, *Spider) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpiderChanged not implemented")
}
func (UnimplementedStatisticsServer) JobChanged(context.Context, *Job) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobChanged not implemented")
}
func (UnimplementedStatisticsServer) TaskChanged(context.Context, *Task) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskChanged not implemented")
}
func (UnimplementedStatisticsServer) RequestChanged(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChanged not implemented")
}
func (UnimplementedStatisticsServer) ItemChanged(context.Context, *Item) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemChanged not implemented")
}
func (UnimplementedStatisticsServer) mustEmbedUnimplementedStatisticsServer() {}

// UnsafeStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServer will
// result in compilation errors.
type UnsafeStatisticsServer interface {
	mustEmbedUnimplementedStatisticsServer()
}

func RegisterStatisticsServer(s grpc.ServiceRegistrar, srv StatisticsServer) {
	s.RegisterService(&Statistics_ServiceDesc, srv)
}

func _Statistics_CrawlerChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crawler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).CrawlerChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Statistics/CrawlerChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).CrawlerChanged(ctx, req.(*Crawler))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_SpiderChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Spider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).SpiderChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Statistics/SpiderChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).SpiderChanged(ctx, req.(*Spider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_JobChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).JobChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Statistics/JobChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).JobChanged(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_TaskChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).TaskChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Statistics/TaskChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).TaskChanged(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_RequestChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).RequestChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Statistics/RequestChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).RequestChanged(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_ItemChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).ItemChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Statistics/ItemChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).ItemChanged(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

// Statistics_ServiceDesc is the grpc.ServiceDesc for Statistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Statistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Statistics",
	HandlerType: (*StatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrawlerChanged",
			Handler:    _Statistics_CrawlerChanged_Handler,
		},
		{
			MethodName: "SpiderChanged",
			Handler:    _Statistics_SpiderChanged_Handler,
		},
		{
			MethodName: "JobChanged",
			Handler:    _Statistics_JobChanged_Handler,
		},
		{
			MethodName: "TaskChanged",
			Handler:    _Statistics_TaskChanged_Handler,
		},
		{
			MethodName: "RequestChanged",
			Handler:    _Statistics_RequestChanged_Handler,
		},
		{
			MethodName: "ItemChanged",
			Handler:    _Statistics_ItemChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/proto/statistics.proto",
}
